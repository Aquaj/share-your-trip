<div class="container-fluid">
  <div class="row">
    <div class="col-md-12 text-center">
      <h2><%= @roadmap.title %></h2>
    </div>
    <div class="col-md-6">
      <div class="col-md-12">
        <div class="start">
          <%= @roadmap.start_destination %> - <%= @roadmap.start_date %>
        </div>
      </div>
      <div class="col-md-12">
        <ol>
          <% @roadmap.activities.where("planned_on IS NOT NULL").each do |activity| %>
            <li><%= activity.experience.title %> - <%= activity.planned_on.to_formatted_s(:long) %></li>
          <% end %>
        </ol>
      </div>
      <div class="col-md-12">
        <ul>
        <% @roadmap.activities.where("planned_on IS NULL").each do |activity| %>
          <li><%= activity.experience.title %></li>
        <% end %>
        </ul>
        <div id="steps"></div>
      </div>
      <div class="col-md-12">
        <div class="end">
          <%= @roadmap.end_destination %> - <%= @roadmap.end_date %>
        </div>
      </div>
    </div>
    <div class="col-md-6" style="height: 500px;">
      <div id="map" style="height: 100%;"></div>
    </div>
  </div>
</div>

<% content_for :after_js do %>
  <script src="//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js"></script>
  <script src='//google-maps-utility-library-v3.googlecode.com/svn/tags/infobox/1.1.9/src/infobox_packed.js' type='text/javascript'></script>
  <script>
  var styleArray = [{"featureType":"administrative","elementType":"all","stylers":[{"visibility":"on"},{"lightness":33}]},{"featureType":"landscape","elementType":"all","stylers":[{"color":"#f2e5d4"}]},{"featureType":"poi.park","elementType":"geometry","stylers":[{"color":"#c5dac6"}]},{"featureType":"poi.park","elementType":"labels","stylers":[{"visibility":"on"},{"lightness":20}]},{"featureType":"road","elementType":"all","stylers":[{"lightness":20}]},{"featureType":"road.highway","elementType":"geometry","stylers":[{"color":"#c5c6c6"}]},{"featureType":"road.arterial","elementType":"geometry","stylers":[{"color":"#e4d7c6"}]},{"featureType":"road.local","elementType":"geometry","stylers":[{"color":"#fbfaf7"}]},{"featureType":"water","elementType":"all","stylers":[{"visibility":"on"},{"color":"#acbcc9"}]}]
  initMap();
function initMap() {
  var markerArray = [];

  // Instantiate a directions service.
  var directionsService = new google.maps.DirectionsService;

  // Create a map and center it on Manhattan.
  var map = new google.maps.Map(document.getElementById('map'), {
    zoom: 13,
  });

  // Create a renderer for directions and bind it to the map.
  var directionsDisplay = new google.maps.DirectionsRenderer({map: map});

  // Instantiate an info window to hold step text.
  var stepDisplay = new google.maps.InfoWindow;

  // Display the route between the initial start and end selections.
  calculateAndDisplayRoute(
      directionsDisplay, directionsService, markerArray, stepDisplay, map);
  // Listen to change events from the start and end lists.
}

function calculateAndDisplayRoute(directionsDisplay, directionsService,
    markerArray, stepDisplay, map) {
  // First, remove any existing markers from the map.
  for (var i = 0; i < markerArray.length; i++) {
    markerArray[i].setMap(null);
  }

  // Retrieve the start and end locations and create a DirectionsRequest using
  // WALKING directions
  <% addresses = ["Bordeaux", "Nantes", "Paris"]; %>
  directionsService.route({
    origin: "<%= addresses[0] %>",
    destination: "<%= addresses[-1] %>",
    travelMode: google.maps.TravelMode.DRIVING,
    waypoints: [<% addresses[1...-1].each do |wp| %>
               {location: "<%= wp %>", stopover: false},
               <% end %>
               ]
  }, function(response, status) {
    // Route the directions and pass the response to a function to create
    // markers for each step.
    if (status === google.maps.DirectionsStatus.OK) {
      document.getElementById('steps').innerHTML =
          '<b>' + response.routes[0].warnings + '</b>';
      directionsDisplay.setDirections(response);
      showSteps(response, markerArray, stepDisplay, map);
    } else {
      window.alert('Directions request failed due to ' + status);
    }
  });
}

function showSteps(directionResult, markerArray, stepDisplay, map) {
  // For each step, place a marker, and add the text to the marker's infowindow.
  // Also attach the marker to an array so we can keep track of it and remove it
  // when calculating new routes.
  var myRoute = directionResult.routes[0].legs[0];
  for (var i = 0; i < myRoute.steps.length; i++) {
    var marker = markerArray[i] = markerArray[i] || new google.maps.Marker;
    marker.setMap(map);
    marker.setPosition(myRoute.steps[i].start_location);
    attachInstructionText(
      stepDisplay, marker, myRoute.steps[i].instructions, map);
  }
}

function attachInstructionText(stepDisplay, marker, text, map) {
  google.maps.event.addListener(marker, 'click', function() {
    // Open an info window when the marker is clicked on, containing the text
    // of the step.
    stepDisplay.setContent(text);
    stepDisplay.open(map, marker);
  });
}
  </script>
<% end %>
